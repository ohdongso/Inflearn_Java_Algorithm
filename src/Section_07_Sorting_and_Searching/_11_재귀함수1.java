package Section_07_Sorting_and_Searching;

public class _11_재귀함수1 {
	/*
		1, 재귀함수는 스택프레임이 생긴다. 스택프레임 안에는(매개변수, 지역변수, 복귀주소) 등이 포함된다.
		2, DFS(3), DFS(2), DFS(1) 순서로 쌓인다.
		3, DFS(3) 호출되면서 스택프레임이 생성된다. 그리고 DFS(n-1)이 호출되면서 DFS(2)로 넘어간다.
		4, DFS(2) 호출되면서 스택프레임이 생성된다. 그리고 DFS(n-1)이 호출되면서 DFS(1)로 넘어간다.
		5, DFS(1) 호출되면서 스택프레임이 생성된다. 그리고 DFS(n-1)이 호출되면서 DFS(0)로 넘어간다.
		6, 기저조건에 의해 재귀함수가 종료된다.
		7, 스택의 상단 DFS(1) 함수로 복귀한다. 그리고 화면에 1을 출력한다. 그리고 할일이 끝나면 POP 시켜준다.
		8, 스택의 상단 DFS(2) 함수로 복귀한다. 그리고 화면에 2을 출력한다. 그리고 할일이 끝나면 POP 시켜준다.
		9, 스택의 상단 DFS(3) 함수로 복귀한다. 그리고 화면에 3을 출력한다. 그리고 할일이 끝나면 POP 시켜준다.
		10, 그렇기 때문에 (1,2,3)이 출력된다.
		11, 재귀함수가 있는곳으로 복귀하면 그부분 "다음라인"부터 실행된다.
		
		* 스택
		DFS(0) - if(n == 0) ==> 기저조건에 의해 함수가 종료되고 DFS(0)은 POP된다.
		DFS(1) - DFS(n-1) ==> 스택프레임이 생성되고 함수는 대기 상태가 된다.
		DFS(2) - DFS(n-1) ==> 스택프레임이 생성되고 함수는 대기 상태가 된다.
		DFS(3) - DFS(n-1) ==> 스택프레임이 생성되고 함수는 대기 상태가 된다.
	 */
	public void DFS(int n) {
		if(n == 0) {
			return; // 함수의 종료의 의미를 같는다.
		} else {
			DFS(n-1); // 자기 메서드를 다시 호출
			System.out.print(n + " ");
		}
	}
	
	public static void main(String[] args) {
		_11_재귀함수1 T = new _11_재귀함수1();
		T.DFS(3); // DFS는 깊이우선탐색의 약자이다
	}
}