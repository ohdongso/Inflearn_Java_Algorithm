package Section_03_Array;

import java.util.Scanner;

public class _11_임시반장_정하기1 {
	/*
		1, 김갑동 선생님이 반장을 선출한다.
		2, 반장이 선출되는 조건은 1학년~5학년까지 가장 같은 반을 많이 했던 학생을 반장으로 정한다.
		3, "가장 같은 반을 많이 했던" 이말의 의미는 각 학생들이 1학년,2학년,3학년,4학년,5학년 중 
		   한번이라도 같은 반이었던 학생을 +1 카운팅 해주면 된다.
		   만약 4번학생과 3번학생이 1학년때 같이 반이었고, 2학년때도 같은 반이면 이미 1학년때 같은 반을 했기때문에 +1만 카운팅되고
		   뒤는 비교하지 않아도 된다.
		4, i는 행을 의미하고 "비교기준이 되는 학생"을 나타낸다.
		   j는 행을 의미하고 "비교대상이 되는 학생"을 나타낸다.
		   k는 열을 의미하고 각 학생의 "학년"을 나타낸다.
		5, i, j가 같은 값을 가질 때 전체가 동등하게 +1 되기때문에 카운팅 해줘도 된다.
	*/

	public int solution(int n, int[][] arr) {
		int answer = 0, max = Integer.MIN_VALUE;
		
		for(int i = 1; i <= n; i++) { // 비교기준이 되는 학생 행
			int cnt = 0;
			for(int j = 1; j <= n; j++) { // 비교대상이 되는 학생 행
				for(int k = 1; k <= 5; k++) { // 각 학생의 학년 열
					
				/*   ==> 데이터가 입력되는 건 (우하, 5*5) 배열이다.
				 	 *   (1) (2) (3) (4) (5) ▶ 학년
				 	 (1)  2   3   1   7   3 
				 	 (2)  4   1   9   6   8 
				 	 (3)  5   5   2   4   4 
				 	 (4)  6   5   2   6   7
				 	 (5)  8   4   2   2   2
				 	  ▼ 
				 	 학생 
				 	  
				 	 (1행,1열~5열) == (1행~5열,2행~5열,3행~5열,4행~5열,5행~5열) ==> 1번학생과 한번 이상 같은 반을 한 학생의 수(1)
				 	 (2행,1열~5열) == (1행~5열,2행~5열,3행~5열,4행~5열,5행~5열) ==> 2번학생과 한번 이상 같은 반을 한 학생의 수(2)
				 	 (3행,1열~5열) == (1행~5열,2행~5열,3행~5열,4행~5열,5행~5열) ==> 3번학생과 한번 이상 같은 반을 한 학생의 수(3)
				 	 (4행,1열~5열) == (1행~5열,2행~5열,3행~5열,4행~5열,5행~5열) ==> 4번학생과 한번 이상 같은 반을 한 학생의 수(4)
				 	 (5행,1열~5열) == (1행~5열,2행~5열,3행~5열,4행~5열,5행~5열) ==> 5번학생과 한번 이상 같은 반을 한 학생의 수(3)
				 	 ==> 자기자신도 비교대상에 포함되기 때문에 +1 전체에 더해져있다.
				 	 ==> 4번학생이 1학년부터 5학년까지 한번이상 같은반이 된 학생들수가 가장 많다. 
				 */
					if(arr[i][k] == arr[j][k]) {
						cnt++;
						break; // 중요
					}
				} // k반복문 끝.
			} // j반복문 끝.
			
			// 비교 기준이되는 학생이랑 비교대상이되는 학생의 비교가 끝나면 해당 조건을 검사한다.
			// (비교기준이되는 학생과 한번이상 같은 반이되었던 학생들 수 > 지금까지 비교기준이되는 학생과 한번이상 같은 반이되었던 학생들 수중 가장 큰값)
			if(cnt > max) {			
				max = cnt; // 최대값에 현재의 학생의 "한번이상 같은 반이되었던 학생들 수"를 넣어준다.
				answer = i; // 그리고 answer에는 현재 학생의 번호를 대입해준다.
			}
		} // i반복문 끝.
	
		return answer;
	}
	
	public static void main(String[] args) {
		_11_임시반장_정하기1 T = new _11_임시반장_정하기1();
		Scanner kb = new Scanner(System.in);
		int n = kb.nextInt();
		int[][] arr = new int[n+1][6];
		/*   ==> 데이터가 입력되는 건 (우하, 5*5) 배열이다.
			 * * * * * *
			 * * * * * * 
			 * * * * * *
			 * * * * * *
			 * * * * * *
			 * * * * * *
		 */
		
		// 행과열에 공백이 있는 숫자를 한번에 입력받아 배열에 저장 할 수 있다.
		for(int i = 1; i <= n; i++) {
			for(int j = 1; j <= 5; j++) {
				arr[i][j] = kb.nextInt();
			}
		}
		/*   ==> 데이터가 입력되는 건 (우하, 5*5) 배열이다.
			 * * * * * *
			 * X X X X X 
			 * X X X X X 
			 * X X X X X 
			 * X X X X X
			 * X X X X X
		 */
		
		System.out.print(T.solution(n, arr));
	}
}